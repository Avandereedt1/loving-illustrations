@import url('https://fonts.googleapis.com/css2?family=Sigmar&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Playpen+Sans&display=swap');
   
   :root {
        --main-color: lightblue;
        --main-contrast-color: #274562;
        --accent-contrast-color: rgb(3, 31, 41);
    }


/* Browser/Display fixes */
html,
body {
    margin: 0;
} 


.navigation {
	overflow: hidden;
    background-color: var(--accent-contrast-color);
    border-color: rgb(61, 128, 167);
    border-style: ridge;
    border-width: 8px;
    height: 30vh;
    max-width: auto;
  }
  
  .navigation a {
	float: left;
	font-size: 26px;
	color: goldenrod;
	text-align: center;
	padding: 14px 16px;
	text-decoration: none;
  }
  
  .dropdown {
	float: left;
	overflow: hidden;
  }
  
  .dropdown .dropbtn {
	font-size: 26px;  
	border: none;
	outline: none;
	color:goldenrod;
	padding: 14px 16px;
	background-color: inherit;
	font-family: inherit;
	margin: 0;
  }
  
  .navigation a:hover, .dropdown:hover .dropbtn {
	background-color: rgb(61, 128, 167);
  }
  
  .dropdown-content {
	display: none;
	position: absolute;
	background-color:  var(--accent-contrast-color);
	min-width: 160px;
	box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
	z-index: 1;
  }
  
  .dropdown-content a {
	float: none;
	color: var(--main-contrast-color);
	padding: 12px 16px;
	text-decoration: none;
	display: block;
	text-align: left;
  }
  
  .dropdown-content a:hover {
	background-color: var(--accent-contrast-color)
  }
  
  .dropdown:hover .dropdown-content {
	display: block;
  }

.logo img {
    border-color: rgb(61, 128, 167);
    border-width: 8px;
    border-style: ridge;
    height: 30vh;
    max-width: auto;
    
}
/* https://css-tricks.com/almanac/properties/b/box-sizing/*/
*, *::before, *::after {
  box-sizing: border-box;
}

/* These selectors target the HTML elements and will apply to every iteration of those elements */
body {
    background-color: var(--main-contrast-color);
    color: red; /* Defines color using named value */
    color: #FF0000; /*Define color using hex code */
    color: rgb(255, 0, 0); /* Defines color using RGB value */
    color: rgba(255, 0, 0, 0.5); /*Defines color using RBG pus Alpha (opacity) value */
    color: var(--accent-contrast-color);

    font-family: "Signika Negative", sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    font-style: normal; 
  }
/*
h1, h2, h3, h4, h5, h6 {
    font-family: "Sigmar", sans-serif;
    font-weight: 400;
    font-style: normal;
}*/

h1{
    font-size: 48x;
}

p{
    font-family: "Playpen Sans";
    font-optical-sizing: auto;
    font-weight: 200;
    font-style: bold;
    /* max-width: 600px; */
}

a{
    background-color: var(--accent-contrast-color);
    color: var(--main-contrast-color);
}

a:hover {
    background-color: var(--accent-color);
    color: var(--accent-color);
}

img {
    max-width: 100%;
}

/* These target the value of the class="" property of our HTML elements, referred to as class names. */
/* You target class names in our CSS by putting a period . before the name of the class. */

.center {
    color: goldenrod;
    margin: 0 auto;
    max-width: 1440;
    width: 80%;
}

.intro {
    align-content: center;
    border-color: var(--accent-contrast-color);
    border-style: solid;
    border-width: 10px;
    background-blend-mode: multiply;
    background-color:  var(--main-color);
    background-position: center;
    background-size: contain;
    color: goldenrod;
    display: flex;
    flex-wrap: wrap;
    height: 50vh;
    justify-content: center;
    min-height: 300px;
    text-align: center;
}

.intro >  {
    width: 100%;
}

*,::before,::after{
  margin: 0;
}

@property --angle {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: true;
}
/* general styling */
html {
	color-scheme: dark light;
}
img{
  max-width: 100%;
}
/* Hide radio buttons */
input[type="radio"] {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

body{

  min-height: 100svh;
  display: grid;
  place-content: center;
  margin: 0;
  padding: 1rem;
  font: 1rem system-ui;
}

.cards{
  border-style: solid;
  border-color: var(--accent-contrast-color);
  border-width: 10px;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: space-between;
  --img-w: 200px;
  --duration: 300ms;
  --img-easing: cubic-bezier(0.34, 1.56, 0.64, 1);
  width: min(100% - 4rem, 800px);
  margin-inline: auto;
  display: grid;
  
  counter-reset: my-counter;
  flex-grow: 0;
    flex-basis: 31.5%;
}

.cards h2{
  flex-basis: 100%;
}

.card{
  --cards-grid-cols: auto;
  --cards-grid-rows: var(--img-w) auto;
  --cards-grid-gap: 2rem;
  --cards-footer-justify: center;
  
  grid-area: 1/1;
  display: grid;
 place-items: center; 
  grid-template-columns: var(--cards-grid-cols);
  grid-template-rows: var(--cards-grid-rows);
  gap: var(--cards-grid-gap);
  
}

@media (600px < width){
  .card{
      --cards-grid-cols: var(--img-w) auto;
      --cards-grid-rows: auto;
      --cards-grid-gap: 4rem;
      --cards-footer-justify: start;
  }
}


.card-img{
  width: 200px;
  height: 200px;
  aspect-ratio: 1 / 1 ;
  rotate: var(--angle, 0deg);
  border-radius: 10px;
  border: 3px solid #FFF;
  overflow: hidden;
  transform-origin: center;
  object-fit: cover;
  box-shadow: 0 0 5px 3px rgba(0 0 0 / .05);
}



input:nth-of-type(1):checked + .card ~ .card > .card-img{
  animation: straighten-img-1 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
.card:has(~input:nth-of-type(2):checked) > .card-img,
input:nth-of-type(2):checked + .card ~ .card > .card-img{
  animation: straighten-img-2 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
.card:has(~input:nth-of-type(3):checked) > .card-img,
input:nth-of-type(3):checked + .card ~ .card > .card-img{
  animation: straighten-img-3 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
.card:has(~input:nth-of-type(4):checked) > .card-img,
input:nth-of-type(4):checked + .card ~ .card > .card-img{
  animation: straighten-img-4 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
.card:has(~input:nth-of-type(5):checked) > .card-img,
input:nth-of-type(5):checked + .card ~ .card > .card-img{
  animation: straighten-img-5 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
.card:has(~input:nth-of-type(6):checked) > .card-img,
input:nth-of-type(6):checked + .card ~ .card > .card-img{
  animation: straighten-img-6 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
.card:has(~input:nth-of-type(7):checked) > .card-img,
input:nth-of-type(7):checked + .card ~ .card > .card-img{
  animation: straighten-img-7 calc(var(--duration) * 2) forwards;
  animation-timing-function: var(--img-easing);
}
/* as CSS can't remove animations, we change the animation according to which checkbox is checked  - all animations are the same (would be simpler with SCSS) */
@keyframes straighten-img-1 { 50%{ --angle: 0deg;} }
@keyframes straighten-img-2 { 50%{ --angle: 0deg;} }
@keyframes straighten-img-3 { 50%{ --angle: 0deg;} }



/* stacking order - these are updated according to which card is selected */
.card{
  z-index: -1;
}
input:checked + .card{
  z-index:10 !important;
}
/* next card checked - place behind */
.card:has(+input:checked){
  z-index:9;
}
/* next card +1 checked - place behind */
.card:has(+input + .card + input:checked){
  z-index:8;
}
/* next card +2 checked - place behind */
.card:has(+input + .card +input + .card + input:checked){
  z-index:7;
}
/* next card +3 checked - place behind */
.card:has(+input + .card +input + .card +input + .card + input:checked){
  z-index:6;
}

.card-data{
  display: grid;
  gap: 1rem;
}
.card-data > .card-num{
  opacity: var(--data-opacity, 0);
  font-size: .8rem;
  color: darkgoldenrod;
}
.card-data > p{
  font-size: 0.9rem;

}
.card-data > h2,
.card-data > p{
  transition: var(--duration) ease-in-out;
  transition-delay: var(--data-delay,0ms);
  opacity: var(--data-opacity, 0);
  translate: 0 var(--data-y, 20px);
}
.card-data > footer{
  display: flex;
  justify-content: var(--cards-footer-justify);
  gap: 2rem;
}
.card-data > footer label{
  margin-block-start: auto;
  cursor: pointer;
  pointer-events: var(--card-events, none);
  opacity: var(--data-opacity, 0);
  transition: color var(--duration) ease-in-out;
  color: var(--label-clr-txt,#000);
  background-color:var(--label-clr-bg,#EEE);
  border-radius: 50%;
  width: 32px;
  height: 32px;
  aspect-ratio: 1/1;
  display: grid;
  place-content: center;
  transition: background-color 300ms ease-in-out,color  300ms ease-in-out;
}


input:checked:focus-visible + .card > .card-data > footer label,
.card-data > footer label:hover{
  --label-clr-txt: #FFF;
  --label-clr-bg: steelblue;
}

input:checked + .card{
  --data-opacity: 1;
  --data-y: 0;
  --data-delay: var(--duration);
  --card-events: auto;
  transition: z-index;
  transition-delay: 300ms;
  /*z-index: 1;*/
}

input:checked +.card > .card-img{
  animation: reveal-img calc(var(--duration) * 2) forwards;
}

@keyframes reveal-img{
  50%{
    translate: -150% 0;
    --angle: 0deg;
  }
}

.comic-one {
  background-color: black;
  border-color: var(--accent-contrast-color);
  border-style: ridge;
  border-width: 8px;
  columns: 4;
}

.comic-one a img {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  max-width: 100%;
  width: 600px;
  height: 600px;
  display: block;
  object-fit: contain;
}
/*
.location {
    box-sizing: border-box;
    border: var(--main-color);
    border-style: solid;
    columns: 3;
    display:flex;
    flex-wrap: wrap;

}

